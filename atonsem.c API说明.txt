/** 
 * \n <b> 使用说明</b> \n
 * 所有信号量都必须在使用前被初始化,初始化函数为atomSemCreate().
 * 初始化之后atomSemGet()和atomSemPut()分别用来减少和增加信号量的计数.
 *
 * 一旦信号量计数为0,继续使用atomSemGet()将阻塞调用的线程(除非传入的参数不需要阻塞).
 * 当线程被阻塞时若执行了atomSemPut(),则高优先级的线程将被唤醒.当多个相同优先级的线程
 * 都被阻塞,则会被同时唤醒,并从他们进入阻塞的位置继续运行
 *
 * 当一个信号量不再被需要的时候,可以使用atomSemDelete()来把其删除.该函数将智能的唤醒
 * 任何被该信号量阻塞的任务.
 *
 *
 * \n <b> 备注 </b> \n
 * 注意
 * Note that those considering using a semaphore initialised to 1 for mutual
 * exclusion purposes may wish to investigate the mutex library available in
 * Atomthreads.
 *
 */